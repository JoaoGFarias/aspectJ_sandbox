package figures.observerPattern;

import figures.Observer;
import figures.Subject;
import figures.Shape;

import java.util.ArrayList;

import figures.Line;
import figures.Point;

public aspect DisplayShapeObserver extends ObserverProcess {

	protected pointcut subjectUpdate(Subject s):
		this(s) && (
		execution(void Shape+.move*(int,int)) ||
		execution(void Line.set*(Point)) ||
		execution(void Line.set*(int,int))
	);

	@Override
	protected void updateObserver(Subject subject, Observer observer) {
		System.out.println("Aspect Update");
	}
	
	private final ArrayList<Observer> Subject.observers = new ArrayList<Observer>();

	public void Subject.registerObserver(Observer observer) {
		if (observer != null && !observers.contains(observer)) {
			observers.add(observer);
		}
	}

	public void Subject.detach(Observer observer) {
		if (observer != null) {
			observers.remove(observer);
		}
	}

}
