package figures.observerPattern;

import figures.Observer;
import figures.Subject;
import figures.Shape;

import java.util.ArrayList;

import figures.Line;
import figures.Point;

public aspect DisplayShapeObserver { //extends ObserverProcess {

	protected pointcut subjectUpdate(Subject s):
		this(s) && (
		execution(void Shape+.moveBy(int,int)) ||
		execution(void Line.set*(Point)) ||
		execution(void Point.set*(int,int))
	);
	
after(Subject subject) returning : subjectUpdate(subject) {
		
		for (Observer observer : getObservers(subject)) {
			updateObserver(subject, observer);
		}
		
	}
//
//	@Override
//	protected void updateObserver(Subject subject, Observer observer) {
//		System.out.println("Aspect Update");
//	}
//	
//	public void Subject.attach(Observer observer) {
//		if (observer != null && !this.subjectsObservers.contains(observer)) {
//			this.subjectsObservers.addObserver(observer);
//		}
//	}
//	
//	public void Subject.detach(Observer observer) {
//		if (observer != null) {
//			this.subjectsObservers.removeObserver(observer);
//		}
//	}
//	
//	

}
