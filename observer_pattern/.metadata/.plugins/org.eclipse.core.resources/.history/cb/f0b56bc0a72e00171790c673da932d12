
import java.util.List;
import java.util.Vector;

import figures.*;

public aspect DisplayObserverAspect {

////	private Subject subject;
////	private List<Subject> subjects;
//	
//	private Subject Display.subject;
//	private List<Subject> Display.subjects;
//	
////	public void addSubject(Subject subject){
////		subject.registerObserver(this);
////		this.subjects.add(subject);
////	}
//	
//	public void Display.addSubject(Subject subject) {
//		subject.registerObserver(Display);
//		this.subjects.add(subject);
//	}
	
	private Vector<Display> Shape.observers = new Vector<Display>();

    public void Shape.addObserver(Display s) {
        this.observers.add(s);
    }
    public void Shape.removeObserver(Display s) {
        this.observers.remove(s);
    }

    pointcut updates(Shape p): target(p) &&
    							(
    								call(void Shape.moveBy(int, int)) ||
    								call(void Shape.set*(int))
    							);

    after(Shape p): updates(p) {
    	
    	for(Display observer: p.observers){
    		updateObserver(p, observer);
    	}
    }

    static void updateObserver(Shape p, Display s) {
        s.update(p);
    }
	
}
